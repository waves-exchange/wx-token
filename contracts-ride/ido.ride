{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func getStringOrFail(key: String) = getString(key).valueOrErrorMessage("mandatory this." + key + " is not defined")

let SEP = "__"
let BUFSCALE = 1000_000_000_000_000_000.toBigInt() # 10^18

# Convertion between Assets - utility functions
func convertPriceAssetIntoIdoAsset(priceAssetAmount: Int, priceAssetMULT: Int, price: Int, priceMULT: Int, idoAssetMULT: Int) = {
  let bPriceMULT = priceAssetMULT.toBigInt()
  let bPriceAssetBUF = fraction(priceAssetAmount.toBigInt(), BUFSCALE, bPriceMULT)
  let bAmountAssetBUF = fraction(bPriceAssetBUF, bPriceMULT, price.toBigInt())
  fraction(bAmountAssetBUF, idoAssetMULT.toBigInt(), BUFSCALE).toInt()
}

# State Data Formatting Functions
let IdxCfgIdoStart            = 1
let IdxCfgIdoDuration         = 2
let IdxCfgClaimStart          = 3
let IdxCfgClaimDuration       = 4
let IdxCfgPrice               = 5
let IdxCfgPriceMult           = 6
let IdxCfgIdoAssetId          = 7
let IdxCfgIdoAssetMult        = 8
let IdxCfgPriceAssetId        = 9
let IdxCfgPriceAssetMult      = 10
let IdxCfgMinInvestAmount     = 11

func fromatConfigS(idoStart: String, idoDuration: String, claimStart: String, claimDuration: String, price: String, priceMult: String,
                   idoAssetId58: String, idoAssetMult: String, priceAssetId58: String, priceAssetMult: String, minInvestAmount: String, totalIdoAssetToSell: String) = {
  makeString([
      "%d%d%d%d%d%d%s%d%s%d%d%d",
      idoStart,               # 1
      idoDuration,            # 2
      claimStart,             # 3
      claimDuration,          # 4
      price,                  # 5
      priceMult,              # 6
      idoAssetId58,           # 7
      idoAssetMult,           # 8
      priceAssetId58,         # 9
      priceAssetMult,         # 10
      minInvestAmount,        # 11
      totalIdoAssetToSell     # 12
      ],
  SEP)
}

func fromatConfig(idoStart: Int, idoDuration: Int, claimStart: Int, claimDuration: Int, price: Int, priceMult: Int,
                  idoAssetId58: String, idoAssetMult: Int, priceAssetId58: String, priceAssetMult: Int, minInvestAmount: Int, totalIdoAssetToSell: Int) = {
  fromatConfigS(
    idoStart.toString(),            # 1
    idoDuration.toString(),         # 2
    claimStart.toString(),          # 3
    claimDuration.toString(),       # 4
    price.toString(),               # 5
    priceMult.toString(),           # 6
    idoAssetId58,                   # 7
    idoAssetMult.toString(),        # 8
    priceAssetId58,                 # 9
    priceAssetMult.toString(),      # 10
    minInvestAmount.toString(),     # 11
    totalIdoAssetToSell.toString()  # 12
  )
}

let IdxInvTotalAmount               = 1
let IdxInvRemainingAmount           = 2
let IdxInvClaimedPriceAssetAmount   = 3
let IdxInvClaimedIdoAssetAmount     = 4
let IdxInvLastClaimedHeight         = 5

func formatInvestorS(totalAmount: String, remainingAmount: String, claimedPriceAssetAmount: String, claimedIdoAssetAmount: String,
                     lastClaimedHeight: String) = {
  makeString([
      "%d%d%d%d%d",
      totalAmount,              # 1
      remainingAmount,          # 2
      claimedPriceAssetAmount,  # 3
      claimedIdoAssetAmount,    # 4
      lastClaimedHeight         # 5
      ],
  SEP)
}

func formatInvestor(totalAmount: Int, remainingAmount: Int, claimedPriceAssetAmount: Int, claimedIdoAssetAmount: Int,
                    lastClaimedHeight: Int) = {
  formatInvestorS(
    totalAmount.toString(),             # 1
    remainingAmount.toString(),         # 2
    claimedPriceAssetAmount.toString(), # 3
    claimedIdoAssetAmount.toString(),   # 4
    lastClaimedHeight.toString()        # 5
  )
}

func formatHistoryRecord(priceAssetAmount: Int, idoAssetAmount: Int) = {
  makeString(["%d%d%d%d", height.toString(), lastBlock.timestamp.toString(), priceAssetAmount.toString(), idoAssetAmount.toString()],  SEP)
}

# Keys Definition
func keyConfig() = {"%s__config"}
func keyInvestor(userAddress: String) = {"%s__" + userAddress}
func keyTotals() = {"%s__totals"}
func keyOperationHistoryRecord(type: String, userAddress: String, txId58: String) = {
    makeString(["%s%s%s%s__history",
        type,
        userAddress,
        txId58],
    SEP)
}

# State Reading Functions
func readConfigArray() = {
  getStringOrFail(keyConfig()).split(SEP)
}
func readTotalsArrayOrDefaultByCustomKey(customKey: String) = {
  getString(customKey)
      .valueOrElse(formatInvestorS("0", "0", "0", "0", "0"))
      .split(SEP)
}
func readTotalsArrayOrDefault() = {
  readTotalsArrayOrDefaultByCustomKey(keyTotals())
}
func readInvestorArrayOrDefault(userAddress: String) = {
  readTotalsArrayOrDefaultByCustomKey(keyInvestor(userAddress))
}
func readInvestorArrayOrFail(userAddress: String) = {
  getStringOrFail(keyInvestor(userAddress)).split(SEP)
}

# Custom Data Entries

let IdxDiffTotalIncrement                 = 0
let IdxDiffRemainingPriceAmountIncrement  = 1
let IdxDiffClaimedPriceAmountIncrement    = 2
let IdxDiffClaimedIdoAssetAmountIncrement = 3

func TotalsEntry(key: String, origArray: List[String], incrementDiff: List[Int], newLastClaimedHeight: Int) = {
  let totalAmount                 = origArray[IdxInvTotalAmount].parseIntValue()
  let remainingAmount             = origArray[IdxInvRemainingAmount].parseIntValue()
  let claimedPriceAssetAmount     = origArray[IdxInvClaimedPriceAssetAmount].parseIntValue()
  let claimedIdoAssetAmount       = origArray[IdxInvClaimedIdoAssetAmount].parseIntValue()
  let lastClaimedHeight           = origArray[IdxInvLastClaimedHeight].parseIntValue()

  let newTotalAmount              = totalAmount             + incrementDiff[IdxDiffTotalIncrement]
  let newRemainingAmount          = remainingAmount         + incrementDiff[IdxDiffRemainingPriceAmountIncrement]
  let newClaimedPriceAssetAmount  = claimedPriceAssetAmount + incrementDiff[IdxDiffClaimedPriceAmountIncrement]
  let newClaimedIdoAssetAmount    = claimedIdoAssetAmount   + incrementDiff[IdxDiffClaimedIdoAssetAmountIncrement]

  if (newRemainingAmount < 0) then throw("invalid math") else

  StringEntry(key,
      formatInvestor(newTotalAmount,          # 1
                  newRemainingAmount,         # 2
                  newClaimedPriceAssetAmount, # 3
                  newClaimedIdoAssetAmount,   # 4
                  newLastClaimedHeight)       # 5
  )
}

func InvestOperationHistoryEntry(userAddress: String, priceAssetAmount: Int, idoAssetAmount: Int, txId: ByteVector) = {
  StringEntry(
      keyOperationHistoryRecord("invest", userAddress, txId.toBase58String()),
      formatHistoryRecord(priceAssetAmount, idoAssetAmount))
}

func ClaimOperationHistoryEntry(userAddress: String, priceAssetAmount: Int, idoAssetAmount: Int, txId: ByteVector) = {
  StringEntry(
      keyOperationHistoryRecord("claim", userAddress, txId.toBase58String()),
      formatHistoryRecord(priceAssetAmount, idoAssetAmount))
}

func internalClaim(claimedAssetId58: String, userAddress: Address, txId: ByteVector) = {
  let cfgArray            = readConfigArray()
  let claimStart          = cfgArray[IdxCfgClaimStart].parseIntValue()
  let claimDuration       = cfgArray[IdxCfgClaimDuration].parseIntValue()
  let claimEnd            = claimStart + claimDuration
  let price               = cfgArray[IdxCfgPrice].parseIntValue()
  let priceMult           = cfgArray[IdxCfgPriceMult].parseIntValue()
  let idoAssetId58        = cfgArray[IdxCfgIdoAssetId]
  let idoAssetId          = idoAssetId58.fromBase58String()
  let idoAssetMult        = cfgArray[IdxCfgIdoAssetMult].parseIntValue()
  let priceAssetId58      = cfgArray[IdxCfgPriceAssetId]
  let priceAssetId        = priceAssetId58.fromBase58String()
  let priceAssetMult      = cfgArray[IdxCfgPriceAssetMult].parseIntValue()

  let userAddress58       = userAddress.toString()

  let origInvestArray           = readInvestorArrayOrFail(userAddress58)
  let investTotalAmount         = origInvestArray[IdxInvTotalAmount].parseIntValue()
  let investLastClaimedHeight   = origInvestArray[IdxInvLastClaimedHeight].parseIntValue()

  let newClaimPeriodHeight =
      if (height > claimEnd)    then claimEnd   else
      if (height < claimStart)  then claimStart
      else height

  let claimingBlocks = newClaimPeriodHeight - investLastClaimedHeight

  let claimingPriceAssetAmount = fraction(investTotalAmount, claimingBlocks, claimDuration)
  let claimingIdoAssetAmount = convertPriceAssetIntoIdoAsset(claimingPriceAssetAmount, priceAssetMult, price, priceMult, idoAssetMult)

  if (claimedAssetId58 == priceAssetId58) then {
    ([0, -claimingPriceAssetAmount, claimingPriceAssetAmount, 0],
        claimingPriceAssetAmount,
        priceAssetId,
        origInvestArray,
        newClaimPeriodHeight,
        [claimingPriceAssetAmount, claimingIdoAssetAmount])
  } else if (claimedAssetId58 == idoAssetId58) then {
    ([0, -claimingPriceAssetAmount, 0, claimingIdoAssetAmount],
        claimingIdoAssetAmount,
        idoAssetId,
        origInvestArray,
        newClaimPeriodHeight,
        [claimingPriceAssetAmount, claimingIdoAssetAmount])
  } else throw("unsupported assetId: " + claimedAssetId58)
}

# @param idoStart
# @param idoDuration
# @param claimStart
# @param claimDuration
# @param price - ticker is idoAsset/priceAsset
@Callable(i)
func constructor(idoStart: Int, idoDuration: Int, claimStart: Int, claimDuration: Int, price: Int, priceAssetId58: String, minInvestAmount: Int) = {
  let priceMult = 100*1000*1000 # 10^8
  let idoEnd = idoStart + idoDuration
  if (getString(keyConfig()).isDefined()) then throw("already initialized") else
  if ("3N4Aib5iubWiGMzdTh6wWiVDVbo32oeVUmH" != i.caller.toString()) then throw("not authorized") else
  if (i.payments.size() != 1) then throw("exactly 1 payment must be attached") else
  if (claimStart <= idoEnd) then throw("claimStart must be greater than idoEnd") else

  let pmt = i.payments[0].value()
  let idoAssetId = pmt.assetId.value()
  let idoAssetInfo = assetInfo(idoAssetId).valueOrErrorMessage("fail to load ido asset info")
  let idoAssetId58 = idoAssetId.toBase58String()
  let idoAssetMult = pow(10, 0, idoAssetInfo.decimals, 0, 0, DOWN)

  let priceAssetId = priceAssetId58.fromBase58String()
  let priceAssetInfo = assetInfo(priceAssetId).valueOrErrorMessage("fail to load price asset info")
  let priceAssetMult = pow(10, 0, priceAssetInfo.decimals, 0, 0, DOWN)

  let origTotalsArray = readTotalsArrayOrDefault()
  let totalsDiff = [0, 0, 0, 0]
  [StringEntry(keyConfig(),
        fromatConfig(idoStart, idoDuration, claimStart, claimDuration, price, priceMult,
              idoAssetId58, idoAssetMult, priceAssetId58, priceAssetMult, minInvestAmount, pmt.amount)),
    TotalsEntry(keyTotals(), origTotalsArray, totalsDiff, claimStart)
  ]
}

@Callable(i)
func invest() = {
  let cfgArray = readConfigArray()
  let idoStart            = cfgArray[IdxCfgIdoStart].parseIntValue()
  let idoDuration         = cfgArray[IdxCfgIdoDuration].parseIntValue()
  let idoEnd              = idoStart + idoDuration
  let claimStart          = cfgArray[IdxCfgClaimStart].parseIntValue()
  let claimDuration       = cfgArray[IdxCfgClaimDuration].parseIntValue()
  let price               = cfgArray[IdxCfgPrice].parseIntValue()
  let priceMult           = cfgArray[IdxCfgPriceMult].parseIntValue()
  let idoAssetId58        = cfgArray[IdxCfgIdoAssetId]
  let idoAssetId          = idoAssetId58.fromBase58String()
  let idoAssetMult        = cfgArray[IdxCfgIdoAssetMult].parseIntValue()
  let priceAssetId58      = cfgArray[IdxCfgPriceAssetId]
  let priceAssetId        = priceAssetId58.fromBase58String()
  let priceAssetMult      = cfgArray[IdxCfgPriceAssetMult].parseIntValue()
  let minIvestAmount      = cfgArray[IdxCfgMinInvestAmount].parseIntValue()

  let userAddress         = i.caller.toString()

  if (height < idoStart) then throw("ido has not been started yet") else
  if (height > idoEnd) then throw("ido has been already ended") else
  if (i.payments.size() != 1) then throw("exactly 1 payment is expected") else
  let pmt         = i.payments[0].value()
  let pmtAssetId  = pmt.assetId.value()
  let pmtAmount   = pmt.amount
  if (pmtAssetId != priceAssetId) then throw("invalid payment asset id: " + pmtAssetId.toBase58String() + " is expected") else
  if (pmtAmount < minIvestAmount) then throw("payment amount is less then min allowed: pmtAmount=" + pmtAmount.toString() + " minIvestAmount=" + minIvestAmount.toString()) else

  let origInvestorArray              = readInvestorArrayOrDefault(userAddress)
  let origTotalsArray                = readTotalsArrayOrDefault()

  let newPriceTotalAmount = origTotalsArray[IdxInvTotalAmount].parseIntValue() + pmtAmount
  let requiredIdoAssetAmount = convertPriceAssetIntoIdoAsset(newPriceTotalAmount, priceAssetMult, price, priceMult, idoAssetMult)
  if (requiredIdoAssetAmount > assetBalance(this, idoAssetId)) then throw("IDO asset has been - sold consider to use smaller payment") else

  let totalsDiff = [pmtAmount, pmtAmount, 0, 0]
  [TotalsEntry(keyInvestor(userAddress), origInvestorArray, totalsDiff, claimStart),
    TotalsEntry(keyTotals(), origTotalsArray, totalsDiff, claimStart),
    InvestOperationHistoryEntry(userAddress, pmtAmount, 0, i.transactionId)
  ]
}

@Callable(i)
func claim(claimedAssetId58: String, userAddress58: String) = {
  let callerAddress58 = i.caller.toString()

  if (userAddress58 != callerAddress58) then throw("not authorized") else

  let claimResultTuple = internalClaim(claimedAssetId58, i.caller, i.transactionId)
  let totalsDiff            = claimResultTuple._1
  let outAmount             = claimResultTuple._2
  let outAssetId            = claimResultTuple._3
  let origInvestArray       = claimResultTuple._4
  let newClaimPeriodHeight  = claimResultTuple._5

  let claimedPriceAmountFromDiff    = totalsDiff[IdxDiffClaimedPriceAmountIncrement]
  let claimedIdoAssetAmountFromDiff = totalsDiff[IdxDiffClaimedIdoAssetAmountIncrement]

  ([ScriptTransfer(i.caller, outAmount, outAssetId),
    TotalsEntry(keyInvestor(userAddress58), origInvestArray, totalsDiff, newClaimPeriodHeight),
    TotalsEntry(keyTotals(), readTotalsArrayOrDefault(), totalsDiff, newClaimPeriodHeight),
    ClaimOperationHistoryEntry(userAddress58, claimedPriceAmountFromDiff, claimedIdoAssetAmountFromDiff, i.transactionId)
  ], unit)
}

@Callable(i)
func claimREADONLY(claimedAssetId58: String, userAddress58: String) = {
  let claimResultTuple = internalClaim(claimedAssetId58, userAddress58.addressFromStringValue(), "".fromBase58String())
  let totalsDiff            = claimResultTuple._1
  let outAmount             = claimResultTuple._2
  let outAssetId            = claimResultTuple._3
  let origInvestArray       = claimResultTuple._4
  let newClaimPeriodHeight  = claimResultTuple._5
  let availableToClaimArray = claimResultTuple._6

  let availablePriceAmountToClaim = availableToClaimArray[0]
  let availableIdoAmountToClaim   = availableToClaimArray[1]

  ([], makeString([
          "%s%d%d",
          userAddress58,
          availablePriceAmountToClaim.toString(),
          availableIdoAmountToClaim.toString()],
        SEP))
}